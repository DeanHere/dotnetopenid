<?xml version="1.0"?>
<!-- 
    Note: As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
	<configSections>
		<section name="urlrewrites" type="ProviderPortal.URLRewriter"/>
	</configSections>
	<system.diagnostics>
		<switches>
			<add name="OpenID" value="4"/>
		</switches>
		<trace autoflush="true" indentsize="4">
			<listeners>
				<add name="fileLogger" type="System.Diagnostics.TextWriterTraceListener"
						 initializeData="openidServerTrace.txt"/>
			</listeners>
		</trace>
	</system.diagnostics>
	<appSettings>
		<!-- If you are on the Internet but behind a NAT firewall and use
             port redirection, you can override the port number used when
             building URLs here.  
             For example: 
                IIS is configured to respond to port 80
                NAT forwards web requests to your server when on port 79
                Set OverrideServerPort = 79 so that the web site knows of this
                redirection and can form port numbers appropriately.
             Not setting this value or setting it to a negative number allows
             the server to reuse the port from the active web request.
             -->
		<!--<add key="OverrideServerPort" value="79" />-->
	</appSettings>
	<connectionStrings/>
	<!-- 
       Original version created by  Richard Birkby (2002-02-22, http://www.codeproject.com/aspnet/URLRewriter.asp)
       Maps from old website to new website using Regular Expressions
       rule/url - old website url (Regular Expression)
       rule/rewrite - new website replacement expression
       Of two or more rules which match a given request, the first  will always take precedance.
    -->
	<urlrewrites>
		<rule>
			<!--  This rewrites urls like: user/john ->user.aspx?username=john-->
			<url>/user/(.*)</url>
			<rewrite>/user.aspx?username=$1</rewrite>
		</rule>
	</urlrewrites>
	<system.web>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="true" />
		<sessionState mode="InProc" cookieless="false"/>
		<membership>
			<providers>
				<clear/>
				<add
					name="AspNetSqlMembershipProvider"
					type="System.Web.Security.SqlMembershipProvider"
					connectionStringName="LocalSqlServer"
					enablePasswordRetrieval="false"
					enablePasswordReset="true"
					requiresQuestionAndAnswer="false"
					applicationName="/"
					requiresUniqueEmail="false"
					passwordFormat="Hashed"
					maxInvalidPasswordAttempts="5"
					minRequiredPasswordLength="1"
					minRequiredNonalphanumericCharacters="0"
					passwordAttemptWindow="10"
					passwordStrengthRegularExpression=""
				/>
			</providers>
		</membership>
		<authorization>
			<!-- This means access to ALL pages requires authentication. Pages can be given explicit authentication further below. -->
			<deny users="?"/>
		</authorization>
		<authentication mode="Forms">
			<forms loginUrl="~/login.aspx" />
		</authentication>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.
 -->
		<customErrors mode="Off">
		</customErrors>
	</system.web>
	<!-- All of the following pages may be accessed without needing authentication. Some of them are called server side and some by the user's browser. -->
	<location path="default.aspx">
		<!-- The home page doesn't need authentication-->
		<system.web>
			<authorization>
				<allow users="*"/>
			</authorization>
		</system.web>
	</location>
	<location path="user.aspx">
		<!-- The user page doesn't have authentication because it hosts the XRDS tags that are parsed via a server side call by the consumer -->
		<system.web>
			<authorization>
				<allow users="*"/>
			</authorization>
		</system.web>
	</location>
	<!-- The xrds page doesn't have authentication because it hosts the XRDS tags that are parsed via a server side call by the consumer -->
	<location path="xrds.aspx">
		<system.web>
			<authorization>
				<allow users="*"/>
			</authorization>
		</system.web>
	</location>
	<!-- The server page doesn't have authentication because it gets called by the consumer via a server side script for all open-id protocol messages-->
	<location path="server.aspx">
		<system.web>
			<authorization>
				<allow users="*"/>
			</authorization>
		</system.web>
	</location>
	<!-- Obiously we cannot have authentication on the login page-->
	<location path="login.aspx">
		<system.web>
			<authorization>
				<allow users="*"/>
			</authorization>
		</system.web>
	</location>
	<system.codedom>
	</system.codedom>
	<system.webServer>
	</system.webServer>
</configuration>
