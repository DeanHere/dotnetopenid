<?xml version="1.0"?>
<!-- 
    Note: As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
    <configSections>
        <sectionGroup name="system.web">
            <section name="urlrewrites" type="Janrain.OpenId.ServerPortal.URLRewriter"/>
        </sectionGroup>
    </configSections>

    <system.diagnostics>
        <switches>
            <add name="OpenID" value="4" />
            <!-- If OpenIDEntireResponse >= 2 then the entire page output will be traced -->
            <add name="OpenIDEntireResponse" value="2" />
        </switches>

        <trace autoflush="true"  indentsize="8"  >
            <listeners>
                <add name="foo"   type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\windows\temp\openidServerTrace.txt"/>
            </listeners>
        </trace>
                
    </system.diagnostics>


    <appSettings>
        <!-- Set this to -1 to exclude the port from the generating urls-->
        <add key="ServerPort" value="79" />
    </appSettings>
    
    <connectionStrings/>

    <!-- 
       Original version created by  Richard Birkby (2002-02-22, http://www.codeproject.com/aspnet/URLRewriter.asp)
		Maps from old website to new website using Regular Expressions
		rule/url - old website url (Regular Expression)
		rule/rewrite - new website replacement expression
		Of two or more rules which match a given request, the first  will always take precedance.
		-->
    <system.web>
        <urlrewrites>
            <rule>
                    <!--  This rewrites urls like: user/john ->user.aspx?username=john-->
                <url>/JanRain.OpenID.ServerPortal/user/(.*)</url>
                <rewrite>/JanRain.OpenID.ServerPortal/user.aspx?username=$1</rewrite>
            </rule>
        </urlrewrites>
    </system.web>

    <system.web>
        <sessionState mode="InProc" cookieless="false"/>

        <!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
        <compilation debug="true" >
        </compilation>
        <authorization>
            <!-- This means access to ALL pages requires authentication. Pages can be given explicit authentication further below. -->
            <deny users="?"/>
        </authorization>
        <authentication mode="Forms">
            <forms name="OpenIdExampleConsumer" loginUrl="~/login.aspx" >
                <credentials passwordFormat="Clear">
                    <user name="bob" password="test"/>
                    <user name="bob1" password="test"/>
                    <user name="bob2" password="test"/>
                    <user name="bob3" password="test"/>
                    <user name="bob4" password="test"/>
                </credentials>
            </forms>
        </authentication>

        <!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.
 -->
        <customErrors mode="Off">
        </customErrors>

    </system.web>

    <!-- All of the following pages may be accessed without needing authentication. Some of them are called server side and some by the user's browser. -->
    <location path="default.aspx">
        <!-- The home page doesn't need authentication-->
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>
    <location path="user.aspx">
        <!-- The user page doesn't have authentication because it hosts the XRDS tags that are parsed via a server side call by the consumer -->
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>
    <!-- The xrds page doesn't have authentication because it hosts the XRDS tags that are parsed via a server side call by the consumer -->
    <location path="xrds.aspx">
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>
    <!-- The server page doesn't have authentication because it gets called by the consumer via a server side script for all open-id protocol messages-->
    <location path="server.aspx">
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>
    <!-- Obiously we cannot have authentication on the login page--> 
    <location path="login.aspx">
        <system.web>
            <authorization>
                <allow users="*"/>
            </authorization>
        </system.web>
    </location>


</configuration>
